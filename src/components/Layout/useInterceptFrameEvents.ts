// useInterceptFrameEvents.ts
import { useEffect } from "react";
// @ts-ignore
import { eventsStore } from "@stores/events"; // –ø—É—Ç—å –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π

type FrameEvent = { type: string; [key: string]: any };

export function useInterceptFrameEvents(w3mFrame: any) {
  useEffect(() => {
    const frame = w3mFrame?.events;
    if (!frame?.onFrameEvent || (frame as any).__patched) return;

    const original = frame.onFrameEvent;

    frame.onFrameEvent = (callback: (event: FrameEvent) => void) => {
      original((event: FrameEvent) => {
        // üéØ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç eventsStore
        const adapted = {
          data: {
            event: event.type || "UNKNOWN",
            properties: event,
          },
          timestamp: Date.now(),
          reportedErrors: event?.error ? { error: event.error } : {},
        };

        eventsStore.events = [...(eventsStore.events || []), adapted];

        eventsStore.addEvent(adapted); // –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        callback(event);
      });
    };

    (frame as any).__patched = true;
    console.log("üì° W3mFrame —Å–æ–±—ã—Ç–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ eventsStore");
  }, [w3mFrame]);
}
