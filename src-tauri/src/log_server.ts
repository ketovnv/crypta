// log_server.ts
const clients = new Set<WebSocket>();
const logs: any[] = [];

// –ó–∞–≥—Ä—É–∂–∞–µ–º HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–æ–≤
let html: string;
try {
  const htmlFile = Bun.file("src-tauri/src/log-ui.html");
  html = await htmlFile.text();
  console.log("[LOG SERVER] HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ");
} catch (err) {
  console.error("[LOG SERVER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ log-ui.html:", err);
  // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
  html = `<!DOCTYPE html>
<html>
<head>
    <title>Crypta - –õ–æ–≥–∏ (Fallback)</title>
    <style>
        body { font-family: monospace; margin: 0; padding: 20px; background: #0d1117; color: #f0f6fc; }
        .error { color: #f85149; font-weight: bold; margin-bottom: 20px; }
        .info { color: #58a6ff; }
    </style>
</head>
<body>
    <div class="error">‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.</div>
    <div class="info">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ log-ui.html –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.</div>
    <div class="info">–õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.</div>
</body>
</html>`;
}

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
const MAX_LOGS = 1000;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
let serverStats = {
  startTime: new Date(),
  totalConnections: 0,
  totalMessages: 0,
  lastActivity: new Date(),
};

export function startLogServer(port: number = 9999) {
  console.log(`[LOG SERVER] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);

  const server = Bun.serve({
    port,
    fetch(req, server) {
      const url = new URL(req.url);

      if (url.pathname === "/ws") {
        if (req.headers.get("upgrade") !== "websocket") {
          return new Response("–û–∂–∏–¥–∞–µ—Ç—Å—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", {
            status: 400,
          });
        }

        const { socket, response } = server.upgrade(req);
        return response;
      }

      if (url.pathname === "/logs") {
        return new Response(JSON.stringify(logs), {
          headers: {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*",
          },
        });
      }

      if (url.pathname === "/stats") {
        const stats = {
          ...serverStats,
          currentConnections: clients.size,
          totalLogs: logs.length,
          memoryUsage: process.memoryUsage(),
        };
        return new Response(JSON.stringify(stats, null, 2), {
          headers: {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*",
          },
        });
      }

      // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ UI
      if (url.pathname === "/" || url.pathname === "") {
        return new Response(html, {
          headers: {
            "Content-Type": "text/html; charset=utf-8",
            "Cache-Control": "no-cache",
          },
        });
      }

      return new Response("Not Found", { status: 404 });
    },
    websocket: {
      open(ws) {
        clients.add(ws);
        serverStats.totalConnections++;
        serverStats.lastActivity = new Date();
        console.log(
          `[LOG SERVER] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${clients.size}`,
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
          ws.send(
            JSON.stringify({
              type: "connection",
              level: "info",
              message: `WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${clients.size}`,
              timestamp: new Date().toISOString(),
            }),
          );
        } catch (err) {
          console.error("[LOG SERVER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:", err);
        }
      },
      message(ws, data) {
        try {
          const log = JSON.parse(data.toString());

          serverStats.totalMessages++;
          serverStats.lastActivity = new Date();

          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          if (!log.timestamp) {
            log.timestamp = new Date().toISOString();
          }

          // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∞
          if (!log.level) {
            log.level = "info";
          }
          if (!log.message) {
            log.message = "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
          }

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ª–æ–≥–æ–≤
          logs.push(log);
          if (logs.length > MAX_LOGS) {
            logs.shift(); // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ª–æ–≥
          }

          // –û—Ç—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
          let broadcastCount = 0;
          for (const client of clients) {
            if (client !== ws && client.readyState === WebSocket.OPEN) {
              try {
                client.send(data);
                broadcastCount++;
              } catch (sendErr) {
                console.error("[LOG SERVER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É:", sendErr);
                clients.delete(client);
              }
            }
          }

          // –í—ã–≤–æ–¥ –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          const timestamp = new Date(log.timestamp).toLocaleTimeString("ru-RU");
          const levelColors = {
            error: "\x1b[31m", // –∫—Ä–∞—Å–Ω—ã–π
            warn: "\x1b[33m", // –∂—ë–ª—Ç—ã–π
            info: "\x1b[36m", // –≥–æ–ª—É–±–æ–π
            debug: "\x1b[35m", // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
          };
          const reset = "\x1b[0m";
          const color = levelColors[log.level] || "\x1b[37m"; // –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

          console.log(
            `${color}[${log.level.toUpperCase()}]${reset} ${timestamp} ${log.message}`,
          );

          if (broadcastCount > 0) {
            console.log(
              `[LOG SERVER] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${broadcastCount} –∫–ª–∏–µ–Ω—Ç–∞–º`,
            );
          }
        } catch (err) {
          console.error("[LOG SERVER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
          console.error("[LOG SERVER] –î–∞–Ω–Ω—ã–µ:", data.toString());
        }
      },
      close(ws) {
        clients.delete(ws);
        serverStats.lastActivity = new Date();
        console.log(
          `[LOG SERVER] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${clients.size}`,
        );
      },
    },
  });

  console.log(`üöÄ –õ–æ–≥-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
  console.log(`   üìä Web UI: http://localhost:${server.port}`);
  console.log(`   üì° WebSocket: ws://localhost:${server.port}/ws`);
  console.log(`   üìà API –ª–æ–≥–æ–≤: http://localhost:${server.port}/logs`);
  console.log(`   üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${server.port}/stats`);
  console.log(`   üíæ –ú–∞–∫—Å. –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${MAX_LOGS}`);

  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  const statsInterval = setInterval(
    () => {
      const uptime = Date.now() - serverStats.startTime.getTime();
      const uptimeMinutes = Math.floor(uptime / 60000);
      console.log(
        `[LOG SERVER] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${uptimeMinutes}–º–∏–Ω —Ä–∞–±–æ—Ç—ã, ${serverStats.totalConnections} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, ${serverStats.totalMessages} —Å–æ–æ–±—â–µ–Ω–∏–π, ${logs.length} –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏`,
      );
    },
    5 * 60 * 1000,
  );

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  process.on("SIGTERM", () => {
    clearInterval(statsInterval);
    console.log("[LOG SERVER] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  });

  return server;
}
